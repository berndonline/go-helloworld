apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helloworld.fullname" . }}
  labels:
    {{- include "helloworld.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "helloworld.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helloworld.selectorLabels" . | nindent 8 }}
        {{- toYaml .Values.podLabels | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "helloworld.serviceAccountName" . }}
      {{- else if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.tracing.enabled }}
        - name: jaeger-agent
          image: jaegertracing/jaeger-agent:latest
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 5775
            name: zk-compact-trft
            protocol: UDP
          - containerPort: 5778
            name: config-rest
            protocol: TCP
          - containerPort: 6831
            name: jg-compact-trft
            protocol: UDP
          - containerPort: 6832
            name: jg-binary-trft
            protocol: UDP
          - containerPort: 14271
            name: admin-http
            protocol: TCP
          args:
          {{- with .Values.tracing.collectorArgs }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
        {{- end }}
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- $hasPodEnv := .Values.podEnv }}
          {{- $dynamodb := .Values.dynamodb }}
          {{- if or $hasPodEnv $dynamodb.enabled }}
          env:
            {{- if $hasPodEnv }}
            {{- toYaml .Values.podEnv | nindent 12 }}
            {{- end }}
            {{- if $dynamodb.enabled }}
            - name: DYNAMODB_TABLE
              value: "{{ $dynamodb.tableName }}"
            - name: AWS_REGION
              value: "{{ $dynamodb.region }}"
            - name: AWS_ROLE_ARN
              value: "{{ $dynamodb.roleArn }}"
            {{- if $dynamodb.roleSessionName }}
            - name: AWS_ROLE_SESSION_NAME
              value: "{{ $dynamodb.roleSessionName }}"
            {{- end }}
            {{- if $dynamodb.webIdentityTokenFile }}
            - name: AWS_WEB_IDENTITY_TOKEN_FILE
              value: "{{ $dynamodb.webIdentityTokenFile }}"
            {{- else if $dynamodb.serviceAccountTokenProjection.enabled }}
            - name: AWS_WEB_IDENTITY_TOKEN_FILE
              value: "{{ printf "%s/%s" $dynamodb.serviceAccountTokenProjection.mountPath $dynamodb.serviceAccountTokenProjection.tokenFile }}"
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if $dynamodb.serviceAccountTokenProjection.enabled }}
          volumeMounts:
            - name: {{ $dynamodb.serviceAccountTokenProjection.volumeName }}
              mountPath: "{{ $dynamodb.serviceAccountTokenProjection.mountPath }}"
              readOnly: true
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9100
          readinessProbe:
            httpGet:
              path: /readyz
              port: 9100
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.pdb.enabled }}
      # PDB is created as a separate resource; see pdb.yaml
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.dynamodb.serviceAccountTokenProjection.enabled }}
      volumes:
        - name: {{ .Values.dynamodb.serviceAccountTokenProjection.volumeName }}
          projected:
            sources:
              - serviceAccountToken:
                  path: "{{ .Values.dynamodb.serviceAccountTokenProjection.tokenFile }}"
                  audience: "{{ .Values.dynamodb.serviceAccountTokenProjection.audience }}"
                  expirationSeconds: {{ .Values.dynamodb.serviceAccountTokenProjection.expirationSeconds }}
      {{- end }}
